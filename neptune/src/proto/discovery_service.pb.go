// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.11.2
// source: discovery_service.proto

package neptune

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EchoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (x *EchoMsg) Reset() {
	*x = EchoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discovery_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoMsg) ProtoMessage() {}

func (x *EchoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_discovery_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoMsg.ProtoReflect.Descriptor instead.
func (*EchoMsg) Descriptor() ([]byte, []int) {
	return file_discovery_service_proto_rawDescGZIP(), []int{0}
}

func (x *EchoMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     *CommonError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Keepalive int32        `protobuf:"varint,2,opt,name=Keepalive,proto3" json:"Keepalive,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discovery_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discovery_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_discovery_service_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterResponse) GetError() *CommonError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RegisterResponse) GetKeepalive() int32 {
	if x != nil {
		return x.Keepalive
	}
	return 0
}

type KeepaliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *KeepaliveRequest) Reset() {
	*x = KeepaliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discovery_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepaliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepaliveRequest) ProtoMessage() {}

func (x *KeepaliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_discovery_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepaliveRequest.ProtoReflect.Descriptor instead.
func (*KeepaliveRequest) Descriptor() ([]byte, []int) {
	return file_discovery_service_proto_rawDescGZIP(), []int{2}
}

func (x *KeepaliveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string   `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Id       int32    `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Address  string   `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
	Services []string `protobuf:"bytes,4,rep,name=Services,proto3" json:"Services,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discovery_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_discovery_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_discovery_service_proto_rawDescGZIP(), []int{3}
}

func (x *Server) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Server) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Server) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Server) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

type Servers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   *CommonError `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	Servers []*Server    `protobuf:"bytes,2,rep,name=Servers,proto3" json:"Servers,omitempty"`
}

func (x *Servers) Reset() {
	*x = Servers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discovery_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Servers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Servers) ProtoMessage() {}

func (x *Servers) ProtoReflect() protoreflect.Message {
	mi := &file_discovery_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Servers.ProtoReflect.Descriptor instead.
func (*Servers) Descriptor() ([]byte, []int) {
	return file_discovery_service_proto_rawDescGZIP(), []int{4}
}

func (x *Servers) GetError() *CommonError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Servers) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

var File_discovery_service_proto protoreflect.FileDescriptor

var file_discovery_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6e, 0x65, 0x70, 0x74, 0x75,
	0x6e, 0x65, 0x1a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x1b, 0x0a, 0x07, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x22, 0x5c, 0x0a, 0x10,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6e, 0x65, 0x70, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x22, 0x0a, 0x10, 0x4b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x22, 0x62,
	0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x60, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e,
	0x65, 0x70, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x70,
	0x74, 0x75, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x32, 0xb3, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x12, 0x3e, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12,
	0x19, 0x2e, 0x6e, 0x65, 0x70, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x70,
	0x74, 0x75, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0f,
	0x2e, 0x6e, 0x65, 0x70, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a,
	0x19, 0x2e, 0x6e, 0x65, 0x70, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x04,
	0x45, 0x63, 0x68, 0x6f, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x70, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x45,
	0x63, 0x68, 0x6f, 0x4d, 0x73, 0x67, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x70, 0x74, 0x75, 0x6e, 0x65,
	0x2e, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_discovery_service_proto_rawDescOnce sync.Once
	file_discovery_service_proto_rawDescData = file_discovery_service_proto_rawDesc
)

func file_discovery_service_proto_rawDescGZIP() []byte {
	file_discovery_service_proto_rawDescOnce.Do(func() {
		file_discovery_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_discovery_service_proto_rawDescData)
	})
	return file_discovery_service_proto_rawDescData
}

var file_discovery_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_discovery_service_proto_goTypes = []interface{}{
	(*EchoMsg)(nil),          // 0: neptune.EchoMsg
	(*RegisterResponse)(nil), // 1: neptune.RegisterResponse
	(*KeepaliveRequest)(nil), // 2: neptune.KeepaliveRequest
	(*Server)(nil),           // 3: neptune.Server
	(*Servers)(nil),          // 4: neptune.Servers
	(*CommonError)(nil),      // 5: neptune.CommonError
}
var file_discovery_service_proto_depIdxs = []int32{
	5, // 0: neptune.RegisterResponse.Error:type_name -> neptune.CommonError
	5, // 1: neptune.Servers.Error:type_name -> neptune.CommonError
	3, // 2: neptune.Servers.Servers:type_name -> neptune.Server
	2, // 3: neptune.Discovery.Keepalive:input_type -> neptune.KeepaliveRequest
	3, // 4: neptune.Discovery.Register:input_type -> neptune.Server
	0, // 5: neptune.Discovery.Echo:input_type -> neptune.EchoMsg
	4, // 6: neptune.Discovery.Keepalive:output_type -> neptune.Servers
	1, // 7: neptune.Discovery.Register:output_type -> neptune.RegisterResponse
	0, // 8: neptune.Discovery.Echo:output_type -> neptune.EchoMsg
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_discovery_service_proto_init() }
func file_discovery_service_proto_init() {
	if File_discovery_service_proto != nil {
		return
	}
	file_error_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_discovery_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discovery_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discovery_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepaliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discovery_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discovery_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Servers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_discovery_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_discovery_service_proto_goTypes,
		DependencyIndexes: file_discovery_service_proto_depIdxs,
		MessageInfos:      file_discovery_service_proto_msgTypes,
	}.Build()
	File_discovery_service_proto = out.File
	file_discovery_service_proto_rawDesc = nil
	file_discovery_service_proto_goTypes = nil
	file_discovery_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiscoveryClient is the client API for Discovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscoveryClient interface {
	Keepalive(ctx context.Context, opts ...grpc.CallOption) (Discovery_KeepaliveClient, error)
	Register(ctx context.Context, in *Server, opts ...grpc.CallOption) (*RegisterResponse, error)
	Echo(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (*EchoMsg, error)
}

type discoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryClient(cc grpc.ClientConnInterface) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) Keepalive(ctx context.Context, opts ...grpc.CallOption) (Discovery_KeepaliveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Discovery_serviceDesc.Streams[0], "/neptune.Discovery/Keepalive", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryKeepaliveClient{stream}
	return x, nil
}

type Discovery_KeepaliveClient interface {
	Send(*KeepaliveRequest) error
	Recv() (*Servers, error)
	grpc.ClientStream
}

type discoveryKeepaliveClient struct {
	grpc.ClientStream
}

func (x *discoveryKeepaliveClient) Send(m *KeepaliveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *discoveryKeepaliveClient) Recv() (*Servers, error) {
	m := new(Servers)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *discoveryClient) Register(ctx context.Context, in *Server, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/neptune.Discovery/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Echo(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (*EchoMsg, error) {
	out := new(EchoMsg)
	err := c.cc.Invoke(ctx, "/neptune.Discovery/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryServer is the server API for Discovery service.
type DiscoveryServer interface {
	Keepalive(Discovery_KeepaliveServer) error
	Register(context.Context, *Server) (*RegisterResponse, error)
	Echo(context.Context, *EchoMsg) (*EchoMsg, error)
}

// UnimplementedDiscoveryServer can be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServer struct {
}

func (*UnimplementedDiscoveryServer) Keepalive(Discovery_KeepaliveServer) error {
	return status.Errorf(codes.Unimplemented, "method Keepalive not implemented")
}
func (*UnimplementedDiscoveryServer) Register(context.Context, *Server) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedDiscoveryServer) Echo(context.Context, *EchoMsg) (*EchoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}

func RegisterDiscoveryServer(s *grpc.Server, srv DiscoveryServer) {
	s.RegisterService(&_Discovery_serviceDesc, srv)
}

func _Discovery_Keepalive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DiscoveryServer).Keepalive(&discoveryKeepaliveServer{stream})
}

type Discovery_KeepaliveServer interface {
	Send(*Servers) error
	Recv() (*KeepaliveRequest, error)
	grpc.ServerStream
}

type discoveryKeepaliveServer struct {
	grpc.ServerStream
}

func (x *discoveryKeepaliveServer) Send(m *Servers) error {
	return x.ServerStream.SendMsg(m)
}

func (x *discoveryKeepaliveServer) Recv() (*KeepaliveRequest, error) {
	m := new(KeepaliveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Discovery_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Server)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neptune.Discovery/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Register(ctx, req.(*Server))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neptune.Discovery/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Echo(ctx, req.(*EchoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Discovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "neptune.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Discovery_Register_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _Discovery_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Keepalive",
			Handler:       _Discovery_Keepalive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "discovery_service.proto",
}
